#!/bin/sh
# 
# git-xflow -- An extension to git-flow, which automatize
# some usual tasks related to repository operations.
#
# Feel free to contribute to this project at:
#    https://github.com/golflima/git-xflow
# git-flow : http://github.com/nvie/gitflow
#
# Copyright 2016 Jérémy Walther (jeremy.walther@golflima.net).
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
# 
# You should have received a copy of the GNU Lesser General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>

GITXFLOW_VERSION="0.3.0-DEV"

################ Import gitflow-common functions ################
export GITXFLOW_DIR=$(dirname "$(echo "$0" | sed -e 's,\\,/,g')")
. "$GITXFLOW_DIR/gitflow-common"
gitflow_load_settings
require_gitflow_initialized
#################################################################

end() {
    echo "Done."
    exit 0;
}

require_argument() {
    if [ -z "$1" ] ; then
        usage $3;
        die $2
    fi
}

usage() {
    case "$1" in
        feature)
            echo "usage: git xflow feature close <name>" ;;
        staging)
            echo "usage: git xflow staging merge <name>"
            echo "       git xflow staging reset"
            echo "       git xflow staging reset <name>" ;;
        release)
            echo "usage: git xflow release pull <name>"
            echo "       git xflow release close <name>" ;;
        hotfix)
            echo "usage: git xflow hotfix publish <name>"
            echo "       git xflow hotfix pull <name>"
            echo "       git xflow hotfix close <name>" ;;
        version)
            echo "usage: git xflow version" ;;
        *)
            echo "usage: git xflow <subcommand>"
            echo
            echo "Available subcommands are:"
            echo "   feature   Manage your feature branches."
            echo "   staging   Manage your staging branch."
            echo "   release   Manage your release branches."
            echo "   hotfix    Manage your hotfix branches."
            echo "   help      Shows help information."
            echo "   version   Shows version information."
            echo
            echo "Try 'git xflow help <subcommand>' for details."
            echo "More information at : https://github.com/golflima/git-xflow" ;;
    esac
}

action_feature_close() {
    require_argument "$name" "Missing <name> argument !" "$subcommand"
    if git_branch_exists $subcommand/$name; then
        echo "Finishing $subcommand/$name ..."
        git flow $subcommand finish $name || die "Can't finish $subcommand/$name !"
    fi

    echo "Closing feature/$name ..."
    git push $ORIGIN $DEVELOP_BRANCH || die "$LINENO: Error !"

    if git_local_branch_exists $subcommand/$name; then
        git push $ORIGIN :$subcommand/$name || die "$LINENO: Error !"
    fi
    end
}

action_staging_merge() {
    require_argument "$name" "Missing <name> argument !" "$subcommand"
    previous_branch=$(git_current_branch)
    require_clean_working_tree
    require_local_branch feature/$name
    echo "Merging feature/$name into staging ..."
    if git_remote_branch_exists staging; then
        git checkout staging || die "$LINENO: Error !"
    else
        if git_local_branch_exists staging; then
            git checkout feature/$name
            git branch -D staging || die "$LINENO: Error !"
        fi
        git checkout -b staging $DEVELOP_BRANCH || die "$LINENO: Error !"
        git push --set-upstream $ORIGIN staging || die "$LINENO: Error !"
    fi
    git pull || die "$LINENO: Error !"
    git merge feature/$name || die "$LINENO: Error !"
    git push || die "$LINENO: Error !"
    git checkout $previous_branch || die "$LINENO: Error !"
    end
}

action_staging_reset() {
    previous_branch=$(git_current_branch)
    require_clean_working_tree
    if [ -z "$name" ] ; then
        echo "Resetting staging to $DEVELOP_BRANCH ..."
        git checkout -B staging $DEVELOP_BRANCH || die "$LINENO: Error !"
    else
        echo "Resetting staging to feature/$name ..."
        require_local_branch feature/$name
        git checkout -B staging feature/$name || die "$LINENO: Error !"
    fi
    git push -f --set-upstream $ORIGIN staging || die "$LINENO: Error !"
    git checkout $previous_branch || die "$LINENO: Error !"
    end
}

action_release_pull() {
    require_argument "$name" "Missing <name> argument !" "$subcommand"
    echo "Pulling release/$name ..."
    git checkout release/$name || die "$LINENO: Error !"
    git pull --rebase $ORIGIN release/$name || die "$LINENO: Error !"
    end
}

action_release_close() {
    require_argument "$name" "Missing <name> argument !" "$subcommand"
    if git_branch_exists $subcommand/$name; then
        echo "Finishing $subcommand/$name ..."
        git flow $subcommand finish $name || die "Can't finish $subcommand/$name !"
    fi

    echo "Closing release/$name ..."
    git push --tags || die "$LINENO: Error !"
    git push $ORIGIN $MASTER_BRANCH || die "$LINENO: Error !"
    git push $ORIGIN $DEVELOP_BRANCH || die "$LINENO: Error !"
    git push $ORIGIN --tags || die "$LINENO: Error !"

    if git_local_branch_exists $subcommand/$name; then
        git push $ORIGIN :$subcommand/$name || die "$LINENO: Error !"
    fi
    end
}

action_hotfix_publish() {
    require_argument "$name" "Missing <name> argument !" "$subcommand"
    echo "Publishing hotfix/$name to $ORIGIN ..."
    git fetch -q $ORIGIN || die "$LINENO: Error !"
    git push -u $ORIGIN hotfix/$name:hotfix/$name || die "$LINENO: Error !"
    git fetch -q $ORIGIN hotfix/$name || die "$LINENO: Error !"
    git checkout hotfix/$name || die "$LINENO: Error !"
    end
}

action_hotfix_pull() {
    require_argument "$name" "Missing <name> argument !" "$subcommand"
    echo "Pulling hotfix/$name ..."
    git checkout hotfix/$name || die "$LINENO: Error !"
    git pull --rebase $ORIGIN hotfix/$name || die "$LINENO: Error !"
    end
}

action_hotfix_close() {
    require_argument "$name" "Missing <name> argument !" "$subcommand"
    if git_branch_exists $subcommand/$name; then
        echo "Finishing $subcommand/$name ..."
        git flow $subcommand finish $name || die "Can't finish $subcommand/$name !"
    fi

    echo "Closing hotfix/$name ..."
    git push --tags || die "$LINENO: Error !"
    git push $ORIGIN $MASTER_BRANCH || die "$LINENO: Error !"
    git push $ORIGIN $DEVELOP_BRANCH || die "$LINENO: Error !"
    git push $ORIGIN --tags || die "$LINENO: Error !"

    if git_local_branch_exists $subcommand/$name; then
        git push $ORIGIN :$subcommand/$name || die "$LINENO: Error !"
    fi
    end
}

action_help() {
    usage $1
    exit 0;
}

action_version() {
    echo "$GITXFLOW_VERSION"
    exit 0;
}



if [ $# -lt 1 ]; then
	usage
    exit 1
fi

subcommand="$1"
action="$2"
name="$3"

if [ "$(type -t action_${subcommand}_${action})" = "function" ] ; then
    action_${subcommand}_${action} $name $*
elif [ "$(type -t action_${subcommand})" = "function" ] ; then
    action_${subcommand} $action $*
fi

die "Not supported operation."