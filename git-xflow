#!/bin/sh
# 
# git-xflow -- An extension to git-flow, which automatize
# some usual tasks related to repository operations.
#
# Feel free to contribute to this project at:
#    https://github.com/golflima/git-xflow
# git-flow : http://github.com/nvie/gitflow
#
# Copyright 2016 Jérémy Walther (jeremy.walther@golflima.net).
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published
# by the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
# 
# You should have received a copy of the GNU Lesser General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>

GITXFLOW_VERSION="0.2.0-xxx-xxx"

################ Import gitflow-common functions ################
export GITXFLOW_DIR=$(dirname "$(echo "$0" | sed -e 's,\\,/,g')")
. "$GITXFLOW_DIR/gitflow-common"
gitflow_load_settings
require_gitflow_initialized
#################################################################

end() {
    echo "Done."
    exit 0;
}

usage() {
    case "$1" in
        feature)
            echo "usage: git xflow feature close <name>" ;;
        staging)
            echo "usage: git xflow staging merge <name>"
            echo "       git xflow staging reset <name>"
            echo "       git xflow staging reset develop" ;;
        release)
            echo "usage: git xflow release pull <name>"
            echo "       git xflow release close <name>" ;;
        hotfix)
            echo "usage: git xflow hotfix publish <name>"
            echo "       git xflow hotfix pull <name>"
            echo "       git xflow hotfix close <name>" ;;
        version)
            echo "usage: git xflow version" ;;
        *)
            echo "usage: git xflow <subcommand>"
            echo
            echo "Available subcommands are:"
            echo "   feature   Manage your feature branches."
            echo "   staging   Manage your staging branch."
            echo "   release   Manage your release branches."
            echo "   hotfix    Manage your hotfix branches."
            echo "   version   Shows version information."
            echo
            echo "Try 'git xflow <subcommand> help' for details."
            echo "More information at : https://github.com/golflima/git-xflow" ;;
    esac
}

action_publish()
{
    case $branch in
        hotfix)
            echo "Publishing hotfix/$target to $ORIGIN ..."
            git fetch -q $ORIGIN || die "$LINENO: Error !"
            git push -u $ORIGIN hotfix/$target:hotfix/$target || die "$LINENO: Error !"
            git fetch -q $ORIGIN hotfix/$target || die "$LINENO: Error !"
            git checkout hotfix/$target || die "$LINENO: Error !" ;;
        *)
            warn "Not supported operation. Using git-flow directly."
            git flow $branch publish $target || die "$LINENO: Error !" ;;
    esac
    end
}

action_pull()
{
    case $branch in
        release)
            echo "Pulling release/$target ..."
            git checkout release/$target || die "$LINENO: Error !"
            git pull --rebase $ORIGIN release/$target || die "$LINENO: Error !" ;;
        hotfix)
            echo "Pulling hotfix/$target ..."
            git checkout hotfix/$target || die "$LINENO: Error !"
            git pull --rebase $ORIGIN hotfix/$target || die "$LINENO: Error !" ;;
        *)
            warn "Not supported operation. Using git-flow directly."
            git flow $branch pull $target || die "$LINENO: Error !" ;;
    esac
    end
}

action_close()
{
    if git_branch_exists $branch/$target; then
        echo "Finishing $branch/$target ..."
        git flow $branch finish $target || die "Can't finish $branch/$target !"
    fi
    case $branch in
        feature)
            echo "Closing feature/$target ..."
            git push $ORIGIN $DEVELOP_BRANCH || die "$LINENO: Error !" ;;
        release)
            echo "Closing release/$target ..."
            git push --tags || die "$LINENO: Error !"
            git push $ORIGIN $MASTER_BRANCH || die "$LINENO: Error !"
            git push $ORIGIN $DEVELOP_BRANCH || die "$LINENO: Error !"
            git push $ORIGIN --tags || die "$LINENO: Error !" ;;
        hotfix)
            echo "Closing hotfix/$target ..."
            git push --tags || die "$LINENO: Error !"
            git push $ORIGIN $MASTER_BRANCH || die "$LINENO: Error !"
            git push $ORIGIN $DEVELOP_BRANCH || die "$LINENO: Error !"
            git push $ORIGIN --tags || die "$LINENO: Error !" ;;
        *)
            die "Not supported operation." ;;
    esac
    if git_local_branch_exists $branch/$target; then
        git push $ORIGIN :$branch/$target || die "$LINENO: Error !"
    fi
    end
}

action_version() {
    echo "$GITXFLOW_VERSION"
    exit 0;
}

branch_staging() {
    case $action in
        merge)
            previous_branch=$(git_current_branch)
            require_clean_working_tree
            require_local_branch feature/$target
            echo "Merging feature/$target into staging ..."
            if git_remote_branch_exists staging; then
                git checkout staging || die "$LINENO: Error !"
            else
                if git_local_branch_exists staging; then
                    git checkout feature/$target
                	git branch -D staging || die "$LINENO: Error !"
                fi
                git checkout -b staging $DEVELOP_BRANCH || die "$LINENO: Error !"
                git push --set-upstream $ORIGIN staging || die "$LINENO: Error !"
            fi
            git pull || die "$LINENO: Error !"
            git merge feature/$target || die "$LINENO: Error !"
            git push || die "$LINENO: Error !"
            git checkout $previous_branch || die "$LINENO: Error !" ;;
        reset)
            previous_branch=$(git_current_branch)
            require_clean_working_tree
            if [ $target = "develop" -a ! "$(git_local_branch_exists feature/develop)" ] ; then
                echo "Resetting staging to $DEVELOP_BRANCH ..."
                git checkout -B staging $DEVELOP_BRANCH || die "$LINENO: Error !"
            else
                echo "Resetting staging to feature/$target ..."
                require_local_branch feature/$target
                git checkout -B staging feature/$target || die "$LINENO: Error !"
            fi
            git push -f --set-upstream $ORIGIN staging || die "$LINENO: Error !"
            git checkout $previous_branch || die "$LINENO: Error !" ;;
        *)
            die "Not supported operation." ;;
    esac
    end
}

[ "$1" = "version" ] && action_version

branch=$1
action=$2
target=$3

if [ -z "$branch" -o -z "$action" -o -z "$target" ] ; then
    usage $1
    die "Not supported operation."
fi

case $branch in
    staging)
        branch_staging ;;
esac

case $action in
    pull)
        action_pull ;;
    publish)
        action_publish ;;
    close)
        action_close ;;
    version)
        action_version ;;
    *)
        die "Not supported operation." ;;
esac